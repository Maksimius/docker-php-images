name: Docker Build and Push

on:
  push:
    branches: [ "main" ]

jobs:
  build_and_push_fpm:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/php8.4-fpm
          tags: type=raw,value=latest

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./php8.4-fpm
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  build_and_push_xdebug:
    needs: build_and_push_fpm
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/php8.4-fpm-xdebug
          tags: type=raw,value=latest

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./php8.4-fpm-xdebug
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  cleanup_untagged:
    needs: build_and_push_xdebug
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      fail-fast: false
      matrix:
        service: [php8.4-fpm, php8.4-fpm-xdebug]
    steps:
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Delete old versions (keep only latest)
        run: |
          echo "Cleaning up old versions for ${{ matrix.service }}"
          OWNER="${{ github.repository_owner }}"
          PACKAGE_NAME="${{ matrix.service }}"
          
          VERSIONS=$(curl -s \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/users/$OWNER/packages/container/$PACKAGE_NAME/versions")
          
          # Удаляем untagged версии
          echo "=== Deleting untagged versions ==="
          UNTAGGED_COUNT=0
          echo "$VERSIONS" | jq -r '.[] | select(.metadata.container.tags | length == 0) | .id' | while read VERSION_ID; do
            echo "Deleting untagged version: $VERSION_ID"
            HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" -X DELETE \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github+json" \
              "https://api.github.com/users/$OWNER/packages/container/$PACKAGE_NAME/versions/$VERSION_ID")
          
            if [ "$HTTP_CODE" = "204" ] || [ "$HTTP_CODE" = "200" ]; then
              echo "✓ Deleted version $VERSION_ID"
              UNTAGGED_COUNT=$((UNTAGGED_COUNT + 1))
            else
              echo "✗ Failed to delete version $VERSION_ID (HTTP $HTTP_CODE)"
            fi
          done
          
          # Удаляем старые tagged версии (не latest)
          echo ""
          echo "=== Deleting old tagged versions (keeping latest) ==="
          TAGGED_COUNT=0
          echo "$VERSIONS" | jq -r '.[] | select(.metadata.container.tags | length > 0) | select(.metadata.container.tags | contains(["latest"]) | not) | "\(.id)|\(.metadata.container.tags | join(","))"' | while IFS='|' read VERSION_ID TAGS; do
            echo "Deleting old tagged version: $VERSION_ID (tags: $TAGS)"
            HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" -X DELETE \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github+json" \
              "https://api.github.com/users/$OWNER/packages/container/$PACKAGE_NAME/versions/$VERSION_ID")
          
            if [ "$HTTP_CODE" = "204" ] || [ "$HTTP_CODE" = "200" ]; then
              echo "✓ Deleted version $VERSION_ID"
              TAGGED_COUNT=$((TAGGED_COUNT + 1))
            else
              echo "✗ Failed to delete version $VERSION_ID (HTTP $HTTP_CODE)"
            fi
          done
          
          echo ""
          echo "Cleanup complete for ${{ matrix.service }}"