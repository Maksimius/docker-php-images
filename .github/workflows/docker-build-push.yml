name: Docker Build and Push

on:
  push:
    branches: [ "main" ]

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      fail-fast: false
      matrix:
        service: [php8.4-fpm, php8.4-fpm-xdebug]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/${{ matrix.service }}
          tags: type=raw,value=latest

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  cleanup_tags:
    needs: build_and_push
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      fail-fast: false
      matrix:
        service: [php8.4-fpm, php8.4-fpm-xdebug]
    steps:
      - name: Install crane
        run: |
          sudo curl -L "https://github.com/google/go-containerregistry/releases/latest/download/crane_Linux_x86_64.tar.gz" | sudo tar -C /usr/local/bin -xz crane

      - name: Log in to GitHub Container Registry with crane
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | crane auth login ghcr.io -u "${{ github.actor }}" --password-stdin

      - name: Delete old tags
        run: |
          OWNER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          IMAGE_NAME="ghcr.io/$OWNER/${{ matrix.service }}"
          TAGS=$(crane ls $IMAGE_NAME)
          for TAG in $TAGS; do
            if [ "$TAG" != "latest" ]; then
              echo "Deleting tag: $IMAGE_NAME:$TAG"
              crane delete $IMAGE_NAME:$TAG
            fi
          done
